package _class;

class Score {	// 객체를 만들기 위한 설계도의 역할을 수행하는 클래스
	int kor, eng, mat;	// 객체의 세부 [속성]값을 저장할 변수(멤버 필드)
	
	void show() {		// 객체의 [기능]을 표현하는 함수(멤버 메소드)
		System.out.println("국어점수 : " + kor);
		System.out.println("영어점수 : " + eng);
		System.out.println("수학점수 : " + mat);
	}
}
/*
 * 		클래스의 구성 요소
 * 
 *  - 필드 : 객체의 속성을 표현하기 위한 변수, 메서드에서는 필드에 접근할 수 있다
 *  - 메서드 : 객체의 기능을 표현하기 위한 함수, 메서드 내부에서 별도의 지역변수를 선언할 수도 있다
 *  - 생성자 : 객체를 생성할 때 호출되는 특수한 함수, 오버로딩이 가능하다. 클래스의 이름과 동일한 함수
 *  - 접근 제한자 : 객체 내부 요소를 보호하기 위한 형식. 외부로부터의 접근가능 여부를 지정한다
 * 
 */
public class Ex02 {
	public static void main(String[] args) {
		// 1) 세 과목의 점수를 배열로 처리함
		int[] arr = { 100, 99, 87 };
		System.out.println("국어점수 : " + arr[0]);// 0은 국어점수이고
		System.out.println("영어점수 : " + arr[1]);// 1은 영어점수이고
		System.out.println("수학점수 : " + arr[2]);// 2는 수학점수이다 (라고 기억해야 함)
		System.out.println();
		
		// 2) 세 과목의 점수를 클래스에 의한 객체로 처리함
		Score ob = new Score(); // new 새로운 객체 생성(자바에서만)
		ob.kor = 100;
		ob.eng = 99;
		ob.mat = 87;
//		System.out.println("국어점수 : " + ob.kor);
//		System.out.println("영어점수 : " + ob.eng);
//		System.out.println("수학점수 : " + ob.mat);
		ob.show();
	}
}

// 객체마다 다른 기능을 가진다.
// 강사라는 자료형으로 수업이라는 메소드(기능)를 수행한다.
// 메소드는 자료형에 의해서 결정된다.
// 강사(원종래)의 객체를 친구 술자리로 옮긴다면 강사라는 자료형이 아닌 친구1이라는 자료형으로 받아들인다.
// 자료형에 따라서 자기 객체가 스스로 보유하고 있는 함수들도 포함시켜야 객체가 움직일 수 있는 환경이 될 수 있다.
// 객체(속성과 기능으로 구분됨) 함수(동작에 관련된것[말한다, 걷는다]) 함수에 의한 결과(리턴값)
// 객체를 구성할때는 속성과 기능으로 구성, 속성을 변수에 저장 기능을 함수라는 형식에 저장 이것을 합친 것이 클래스
// 다른말로 멤버필드, 멤버 메소드

// 데이터가 하나의 덩어리 뭉쳐져있는 것이 다루기 쉽다.
// 클래스를 만들고 7개의 필드를 만들고 예쁘게 출력할 수 있는 함수를 만들면 다루기 쉬운 데이터를 생성가능.
// 클래스를 다루는 것은 데이터를 쉽게 다루기 위해, 사람의 생각과 컴퓨터의 생각을 일치시키지 위한 것.